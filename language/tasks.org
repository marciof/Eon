* TODO shell pipeline syntax?

- update grammar (comma as the pipe character) 
- add pipe examples in the function section 
- how are getopt flags handled? eg. `ls -la ./example`
- https://github.com/willghatch/racket-rash
- "Pipelines Support Vectorized, Point-Free, and Imperative Style", https://www.oilshell.org/blog/2017/01/15.html

* TODO indentation based syntax grammar

- https://github.com/tonyg/racket-something
- https://docs.python.org/3/reference/grammar.html
- https://devguide.python.org/compiler/
- accept keyword arguments on indented lines as well? (use parenthesis to force a function call, as it‘s a more uniform syntax?)
- avoid `do` as a built-in? Specify indentation
  - too Implicit? More flexibility? Ambiguous?
- A file is a list of expressions. 
  - an empty file is an empty list
  - stdin is also a list of expressions (list length isn’t known a priori?)
  - REPL is just stdin as a “file”
  - REPL can also use a file as input
  - file should be the same as a REPL?
  - REPL uses a custom evaluator
    - like `let*` per expression
    - with custom commands? Eg. help
    - (make its API public/embeddable)
  - `import` can evaluate list items
  - just like a file-wide `let*`
 
if [logged-in? user] then=
  this-first
  this-second

if [logged-in? user] then=do
  this-first
  this-second

if [logged-in? user] do
  this-first
  this-second

# Globals without `let`
name='Bob'
age=20

* TODO revisit license?

- switch to European Union Public Licence?
- https://oppen.digital/memex/posts/tech/licenses/
- https://codeberg.org/oppenlab/oppen_license
- https://prosperitylicense.com/ 

* TODO fix site redirect

- transfer domain out of Google? https://www.cloudflare.com/products/registrar/
- https://hstspreload.org/

* TODO lexical binding by default for safety?

* TODO lint spec

- verify char hex codes in the grammar
- run code snippets
- ensure non-numbered bullet point lists are in alphabetical order

* TODO decouple interfaces from implementations

- Case in point: sets were implied to be insertion ordered by deriving them from maps. 

* TODO improve/clean documentation

- ensure use of open standards, eg. https://github.com/deltachat/deltachat-core-rust/blob/master/standards.md#standards-used-in-delta-chat
- ensure sections are alphabetical for ease of use
- how do number keys and keyword parameters work in function lists? Do keywords alias number keys?
- function naming example (1st key is the name, 1st value is the body/a fn), eg. `\(incr: + x 1)`
- how to regularly ensure language goals are being met?
- be succinct, avoid fluff
- lexical and dynamic scope example (explain how `bindings` in fn lists affect their scope)
- use only: must, should, may? And explain each one like RFCs
- add references to each section, where needed, for prior art?
  - https://github.com/denoland/deno/pull/671
  - https://github.com/ulid/spec#prior-art
- in examples, should the resulting output of each expression be `repr`-like?
- Function sub headings? Examples and conditions per section
- Language code snippet example right on the front page (simple example, and show-off powerful example)
- Runnable examples, eg. https://doc.rust-lang.org/book/
- start a changelog? (and do releases?) https://keepachangelog.com/en/1.0.0/
- ensure: simplicity, clarity, and frugality

Philosophy from Tildes:

"Use modern versions of simple, reliable, "boring" technology
There should need to be an extremely compelling reason to use a new or less-known technology to implement something if it could also be done with one of the reliable ones already being used.
This will, also, make it easier for people to understand and contribute to the open-source code when there are fewer pieces involved and the ones being used are generally well-known and well-documented."

* TODO create coding style linting tool (use unifiedjs or similar?)

* TODO attempt to unify data types?

- separate map syntax is confusing with sets? would static typing with inference make it less of a problem?
- numbers are symbols that evaluate to themselves
- booleans are numbers restricted to either 0 or 1
- maps are the root
- merge lists/arrays with function lists? easily merge arg lists into fns? `[]` `()`
- make it easier to type function lists? use `[]`?

* TODO visual grammar diagram?

- validate grammar as part of the build anyway 
- Railroad Diagram Generator
- http://lua4z.com/doc/manual/syntax.md.html

* TODO build target to lint/validate CommonMark documents

- GitHub Super Linter, https://news.ycombinator.com/item?id=23563823
- https://talk.commonmark.org/t/is-there-a-commonmark-tidy-answer-kinda/2464/3
- https://github.com/DavidAnson/markdownlint
- https://github.com/markdownlint/markdownlint
- https://github.com/igorshubovych/markdownlint-cli
- https://github.com/remarkjs/remark-lint
- https://github.com/notslang/tidy-markdown

* TODO optional static typing?

- Remove prototypical inheritance?
- check out BLisp, https://ytakano.github.io/blisp/

* TODO support for streaming, iterators, delayed collections?

- stdlib or core?
- could be useful for shell pipelines?
- `next` is an iterator?
- generator expressions? JS yield?

* TODO replace exceptions/conditions/continuations with optionals?

- https://doc.rust-lang.org/book/ch09-02-recoverable-errors-with-result.html
- https://doc.rust-lang.org/std/panic/fn.catch_unwind.html
- http://joeduffyblog.com/2016/02/07/the-error-model/
- http://www.sheshbabu.com/posts/rust-error-handling/

* TODO generalize `:` and `.` to multiple elements?

- would enable more uses, eg. `127.0.0.1`, `12:45:00`
- too much added syntax?

* TODO multiline nesting comments? triple quotes?

- Language ergonomics shouldn't need an IDE?

* TODO make `count` throw an error for built-ins or foreign values?

* TODO add a core built-in `has?`?

* TODO have a generic `splice`? = insert + merge + delete

- decouple `insert`? setting from displacing

* TODO make `insert` accept where before at?

- Since maps are insertion ordered. 
- `(insert map key value [before])`
- `(insert set value [before])`

* TODO verify soundness of Text

- Unicode/string/text/char/bytes support
- Rust String/Grapheme, <https://tildes.net/~comp/9t9/utf_8_everywhere#comment-2hai>

* TODO are decimals under-specified?

- exactness of floating point math, https://0.30000000000000004.com
- math numerals vs number and representations, eg. 0.999 = 1, https://news.ycombinator.com/item?id=23004086
- https://www.chiark.greenend.org.uk/~sgtatham/spigot/
- https://hackage.haskell.org/package/exact-real
- https://github.com/dpsanders/ExactReals.jl
- http://fredrikj.net/calcium/
- https://blog.acolyer.org/2020/10/02/toward-an-api-for-the-real-numbers/

* TODO syntax for complex numbers?

- Surreal numbers? https://en.wikipedia.org/wiki/Surreal_number
- number tower like Scheme? https://en.m.wikipedia.org/wiki/List_of_types_of_numbers

* TODO syntax for fractions?

* TODO syntax for imaginary numbers?

* TODO more Map subtypes? bidirectional map? sorted map?

* TODO numerical tower? with syntax?

- (prototype 0) # non-neg int
- (prototype 1) # positive int
- (prototype -1) # int
- (prototype 0.0) # non-neg decimal
- (prototype 1.0) # positive decimal
- (prototype -1.0) # decimal
- (prototype 1.(3)) # real
- (prototype 1+2i) # imaginary?

* TODO how to expose language Metadata? version vs feature detection? 

- examples: line number, column number, size of maps, type of values, number numerator, denominator
- https://github.com/oilshell/oil/wiki/Feature-Detection-Is-Better-than-Version-Detection
- allow multiple versions of the same package (see Python venv)
- allow freezing/pinning dependency versions (version tree) 

* TODO allow easy FFI for reuse and interoperability

- This is a Must? 
- https://github.com/morloc-project/morloc

* TODO tabular lists? Data query language?

- https://github.com/Tablam/TablaM/blob/master/text.tbm
- only one way to query, https://github.com/Tablam/TablaM

* TODO FEXPRs: "Special Forms in Lisp", https://www.nhplace.com/kent/Papers/Special-Forms.html

- "On Fexprs and Defmacro"
  - https://news.ycombinator.com/item?id=24932701
  - https://www.brinckerhoff.org/scraps/joe-marshall-on-FEXPRS-and-DEFMACRO.txt
- macros instead of fexprs?
- arguments for quoted parameters aren’t automatically evaluated, but unquoted are?
- could allows early returns?
- could replace exceptions?
- potentially more performant?
- have quasi-quote and unquote?
- should `defer`'s `escape` accept multiple arguments?

* TODO Clojure change and state, http://www.infoq.com/presentations/Value-Identity-State-Rich-Hickey

* TODO "Empirical Analysis of Programming Language Adoption", Leo A. Meyerovich, Ariel Rabkin: http://sns.cs.princeton.edu/docs/asr-oopsla13.pdf

* TODO "Dealing with Properties", Martin Fowler, https://www.martinfowler.com/apsupp/properties.pdf

* TODO "The Once and Future Shell", https://angelhof.github.io/files/papers/shell-2021-hotos.pdf

* TODO evaluate typing difficulty of each identifier and syntax quantitatively

- Bulk analyze source code out there.
- Frequency of syntax tokens, familiarity, ease of typing, speaking, identifiers.
- Can the syntax grammar be simplified without hurting readability and flexibility?
- Can the language itself/concepts be simplified without sacrificing readability and flexibility?
- Use easier synonyms for hard to type words?
- https://en.wikipedia.org/wiki/Comparison_of_programming_languages_(syntax)
- http://hyperpolyglot.org/scripting
- https://github.com/anvaka/common-words/blob/master/README.md
- "Psychological effects of coding style"
  - https://www.devever.net/~hl/codingstylepsych
  - https://news.ycombinator.com/item?id=22992914

* TODO learn best/worst features of other languages/systems (check first the ones listed as inspiration)

- Oil shell (tons of prior research) 
  - https://www.oilshell.org/blog/
  - https://github.com/oilshell/oil/wiki/Language-Design-Principles
- dgsh, directed graph shell, https://www2.dmst.aueb.gr/dds/sw/dgsh/
- nutshell, https://github.com/nushell/nushell
- Elm
- Rust
  - https://soc.me/languages/notes-on-rust.html
- Elvish, https://elv.sh/
- CAS Computer Algebra System
  - GNU Octave
  - Maxima Algebra System
  - Mathematica
  - SageMath
  - Matlab
- insect, https://insect.sh
- BLisp
- PowerShell
- OCaml
- C
- Tcl/Tk
- TablaM
- Common Lisp
- JavaScript
- Perl
- Python
- Scheme
- Smalltalk
- Mesh Spreadsheet
- Java
- Clojure
- Self
- Kotlin
- Wren
- F#
- Ruby
- Julia
- Haskell
- Erlang
- Elixir
- Typed Racket
- PureScript
- Io
- ML
- Lua
- Haxe
- Shen
- REBOL
- Red
- HyperCard
- Awk
- Parabola.io
- Pascal
- R
- HyperTalk/HyperCard
- AppleScript
- bsed, https://github.com/andrewbihl/bsed
- xl, https://github.com/c3d/xl
- Oberon
- Janet
- V
