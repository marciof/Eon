* TODO financing

- https://www.patreon.com/zloirock
- https://opencollective.com/core-js
- https://flattr.com
- https://www.buymeacoffee.com/mweststrate
- https://www.buymeacoffee.com/claudiodangelis
- https://itsfoss.com/open-source-funding-platforms/

* TODO check licensing of everything (compile list in a text file?)

* TODO improve documentation

- fully switch to Org-mode? https://orgmode.org/org.html
- add references to each section, where needed, for prior art? https://github.com/denoland/deno/pull/671
- In examples, the resulting output of each expression should be `repr`-like?
- https://github.com/keepassxreboot/keepassxc/wiki/Building-KeePassXC
- Make `count` throw an error for built-ins or foreign values?
- Function sub headings
- Examples and conditions per section
- Language code snippet example right on the front page, https://www.disneylandparis.com/en-us/
- Ensure floating point math is exact by default, https://0.30000000000000004.com
- Runnable examples (eg. https://doc.rust-lang.org/book/)
- Unicode/string/text/char/bytes support (Rust String/Grapheme, <https://tildes.net/~comp/9t9/utf_8_everywhere#comment-2hai>)
- math numerals vs number and representations, eg. 0.999 = 1, https://news.ycombinator.com/item?id=23004086

* TODO investigate shell pipeline support

- "Pipelines Support Vectorized, Point-Free, and Imperative Style", https://www.oilshell.org/blog/2017/01/15.html
- https://blog.jessfraz.com/post/for-the-love-of-pipes/
- https://github.com/tc39/proposal-pipeline-operator/blob/master/README.md
- https://stackoverflow.com/questions/6145002/operator-in-clojure

* TODO investigate having no exceptions

- https://doc.rust-lang.org/book/ch09-02-recoverable-errors-with-result.html
- no continuations either?

* TODO multiline nesting comments?

- Language ergonomics shouldn't need an IDE? Progressive enhancement

* TODO investigate optional static typing?

* TODO syntax for complex numbers?

- Surreal numbers? https://en.wikipedia.org/wiki/Surreal_number

* TODO syntax for fractions?

* TODO build target to lint/validate CommonMark documents (or use Org-mode?)

- validate link rot?
  - https://github.com/macedotavares/Glass-Dome
  - https://github.com/smallhadroncollider/brok
- https://github.com/commonmark/cmark
- https://talk.commonmark.org/t/is-there-a-commonmark-tidy-answer-kinda/2464/3
- https://github.com/DavidAnson/markdownlint
- https://github.com/markdownlint/markdownlint
- https://github.com/igorshubovych/markdownlint-cli
- https://github.com/remarkjs/remark-lint
- https://github.com/notslang/tidy-markdown

* TODO visual grammar diagram?

- Railroad Diagram Generator
- http://lua4z.com/doc/manual/syntax.md.html

* TODO indentation based syntax grammar

- https://docs.python.org/3/reference/grammar.html
- https://devguide.python.org/compiler/

* TODO FEXPRs: "Special Forms in Lisp", https://www.nhplace.com/kent/Papers/Special-Forms.html

* TODO http://www.infoq.com/presentations/Value-Identity-State-Rich-Hickey

* TODO "Empirical Analysis of Programming Language Adoption", Leo A. Meyerovich, Ariel Rabkin: http://sns.cs.princeton.edu/docs/asr-oopsla13.pdf

* TODO "Dealing with Properties", Martin Fowler, https://www.martinfowler.com/apsupp/properties.pdf

* TODO evaluate typing difficulty of each identifier and syntax quantitatively

- Can the syntax grammar be simplified without hurting readability and flexibility?
- Can the language itself/concepts be simplified without sacrificing readability and flexibility?
- Use easier synonyms for hard to type words?
- Bulk analyze source code out there.
- Frequency of syntax tokens, familiarity, ease of typing, speaking, identifiers.
- https://en.wikipedia.org/wiki/Comparison_of_programming_languages_(syntax)
- http://hyperpolyglot.org/scripting
- https://github.com/anvaka/common-words/blob/master/README.md
- "Psychological effects of coding style"
  - https://www.devever.net/~hl/codingstylepsych
  - https://news.ycombinator.com/item?id=22992914

* TODO evaluate performance

- https://github.com/trizen/language-benchmarks

* TODO version vs feature detection

- specify how it's done
- https://github.com/oilshell/oil/wiki/Feature-Detection-Is-Better-than-Version-Detection

* TODO learn best/worst features of other languages/systems (check first the ones listed as inspiration)

- Elm
- Rust
  - https://soc.me/languages/notes-on-rust.html
- Oil shell
  - https://www.oilshell.org/blog/
  - https://github.com/oilshell/oil/wiki/Language-Design-Principles
- CAS Computer Algebra System
  - GNU Octave
  - Maxima Algebra System
  - Mathematica
  - SageMath
  - Matlab
- PowerShell
- OCaml
- C
- Tcl/Tk
- Common Lisp
- JavaScript
- Perl
- Python
- Scheme
- Smalltalk
- Mesh Spreadsheet
- Java
- Clojure
- Self
- Kotlin
- Wren
- F#
- Ruby
- Julia
- Haskell
- Erlang
- Elixir
- Typed Racket
- PureScript
- Io
- ML
- Lua
- Haxe
- Shen
- REBOL
- HyperCard
- Awk
- Parabola.io
- Pascal
- R
- HyperTalk/HyperCard
- AppleScript
- bsed, https://github.com/andrewbihl/bsed
- xl, https://github.com/c3d/xl
- Oberon
