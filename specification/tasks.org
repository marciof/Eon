* TODO improve documentation

- explain `prototype` isn't prototypical inheritance, it's like cloning and modifying (dictionary definition)
- lexical scope example
- function naming example, eg. `\(incr: + x 1)`
- use only: must, should, may?
- add references to each section, where needed, for prior art? https://github.com/denoland/deno/pull/671
- in examples, should the resulting output of each expression be `repr`-like?
- https://github.com/keepassxreboot/keepassxc/wiki/Building-KeePassXC
- Function sub headings? Examples and conditions per section
- Language code snippet example right on the front page
- Runnable examples, eg. https://doc.rust-lang.org/book/
- start a changelog? (and do releases?) https://keepachangelog.com/en/1.0.0/

* TODO visual grammar diagram?

- Railroad Diagram Generator
- http://lua4z.com/doc/manual/syntax.md.html

* TODO build target to lint/validate CommonMark documents

- link rot dependencies (add to Travis): python3, apt install python3-dev, pip install paka.cmark
- https://github.com/commonmark/cmark
- https://talk.commonmark.org/t/is-there-a-commonmark-tidy-answer-kinda/2464/3
- https://github.com/DavidAnson/markdownlint
- https://github.com/markdownlint/markdownlint
- https://github.com/igorshubovych/markdownlint-cli
- https://github.com/remarkjs/remark-lint
- https://github.com/notslang/tidy-markdown

* TODO indentation based syntax grammar

- https://docs.python.org/3/reference/grammar.html
- https://devguide.python.org/compiler/

* TODO optional static typing?

* TODO make List extend Function? easily merge arg lists into fns?

* TODO shell pipeline syntax?

- "Pipelines Support Vectorized, Point-Free, and Imperative Style", https://www.oilshell.org/blog/2017/01/15.html

* TODO replace exceptions/conditions/continuations with optionals?

- https://doc.rust-lang.org/book/ch09-02-recoverable-errors-with-result.html
- https://doc.rust-lang.org/std/panic/fn.catch_unwind.html
- http://joeduffyblog.com/2016/02/07/the-error-model/

* TODO multiline nesting comments? triple quotes?

- Language ergonomics shouldn't need an IDE?

* TODO make `count` throw an error for built-ins or foreign values?

* TODO have a generic `splice`? = insert + merge + delete

* TODO verify soundness of Text

- Unicode/string/text/char/bytes support
- Rust String/Grapheme, <https://tildes.net/~comp/9t9/utf_8_everywhere#comment-2hai>

* TODO are decimals under-specified?

- exactness of floating point math, https://0.30000000000000004.com
- math numerals vs number and representations, eg. 0.999 = 1, https://news.ycombinator.com/item?id=23004086

* TODO syntax for complex numbers?

- Surreal numbers? https://en.wikipedia.org/wiki/Surreal_number
- number tower like Scheme? https://en.m.wikipedia.org/wiki/List_of_types_of_numbers

* TODO syntax for fractions?

* TODO version vs feature detection

- https://github.com/oilshell/oil/wiki/Feature-Detection-Is-Better-than-Version-Detection

* TODO FEXPRs: "Special Forms in Lisp", https://www.nhplace.com/kent/Papers/Special-Forms.html

- macros instead of fexprs?
- could allows early returns?
- could replace exceptions?
- potentially more performant?
- have quasi-quote and unquote?

* TODO Clojure change and state, http://www.infoq.com/presentations/Value-Identity-State-Rich-Hickey

* TODO "Empirical Analysis of Programming Language Adoption", Leo A. Meyerovich, Ariel Rabkin: http://sns.cs.princeton.edu/docs/asr-oopsla13.pdf

* TODO "Dealing with Properties", Martin Fowler, https://www.martinfowler.com/apsupp/properties.pdf

* TODO evaluate typing difficulty of each identifier and syntax quantitatively

- Can the syntax grammar be simplified without hurting readability and flexibility?
- Can the language itself/concepts be simplified without sacrificing readability and flexibility?
- Use easier synonyms for hard to type words?
- Bulk analyze source code out there.
- Frequency of syntax tokens, familiarity, ease of typing, speaking, identifiers.
- https://en.wikipedia.org/wiki/Comparison_of_programming_languages_(syntax)
- http://hyperpolyglot.org/scripting
- https://github.com/anvaka/common-words/blob/master/README.md
- "Psychological effects of coding style"
  - https://www.devever.net/~hl/codingstylepsych
  - https://news.ycombinator.com/item?id=22992914

* TODO learn best/worst features of other languages/systems (check first the ones listed as inspiration)

- Elm
- Rust
  - https://soc.me/languages/notes-on-rust.html
- Oil shell
  - https://www.oilshell.org/blog/
  - https://github.com/oilshell/oil/wiki/Language-Design-Principles
- CAS Computer Algebra System
  - GNU Octave
  - Maxima Algebra System
  - Mathematica
  - SageMath
  - Matlab
- PowerShell
- OCaml
- C
- Tcl/Tk
- Common Lisp
- JavaScript
- Perl
- Python
- Scheme
- Smalltalk
- Mesh Spreadsheet
- Java
- Clojure
- Self
- Kotlin
- Wren
- F#
- Ruby
- Julia
- Haskell
- Erlang
- Elixir
- Typed Racket
- PureScript
- Io
- ML
- Lua
- Haxe
- Shen
- REBOL
- HyperCard
- Awk
- Parabola.io
- Pascal
- R
- HyperTalk/HyperCard
- AppleScript
- bsed, https://github.com/andrewbihl/bsed
- xl, https://github.com/c3d/xl
- Oberon
- Janet
- V
