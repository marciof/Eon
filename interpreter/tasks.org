* interpreter

** TODO rename words?

- https://news.ycombinator.com/item?id=23473387, https://www.hanselman.com/blog/EasilyRenameYourGitDefaultBranchFromMasterToMain.aspx
- https://mail.gnome.org/archives/desktop-devel-list/2019-May/msg00066.html

** TODO CMake is too complex/big, alternatives? Make?

- linker dependencies README
- build instructions README
- https://noahloomans.com/tutorials/makefile/
- https://nullprogram.com/blog/2017/08/20/
- https://pubs.opengroup.org/onlinepubs/9699919799/utilities/make.html
- https://skramm.blogspot.com/2013/04/writing-portable-makefiles.html
- https://david.rothlis.net/large-gnu-make/
- dev cycle watch (use inotify?), https://github.com/watchexec/watchexec

** TODO decouple interpreter sub-modules from each other?

- C includes, `#include <karyon/core/Log.h>`
- C library, `-lkaryon`
- inspiration from Cosmopolitan? https://justine.lol/cosmopolitan/

** TODO ensure simplicity

- https://suckless.org
- https://christine.website/blog/why-i-use-suckless-tools-2020-06-05
- minimal bootstrapping seed
  - Guix Further Reduces Bootstrap Seed to 25%, https://news.ycombinator.com/item?id=23526916
  - https://guix.gnu.org/blog/2020/guix-further-reduces-bootstrap-seed-to-25/
  - https://savannah.nongnu.org/projects/stage0
  - https://bootstrappable.org

** TODO dynamic vs static linking

- as an option?

** TODO simplify error handling and use Maybe/Optional types?

** TODO support Haiku? ReactOS?

- very different OS than others, so there's value in testing this has a proper/working abstraction layer?
- https://www.haiku-os.org/get-haiku/installation-guide/

** TODO split dependencies per build target (eg. native, x86-32, etc)

- test c99 POSIX compiler?
- sign-up to interest mailing lists for dependencies? including OS, CI, etc
- enable more MSVC CL warnings
- setup CI builds for both 32-bit and 64-bit hosts
  - https://github.com/travis-ci/travis-ci/issues/5770
- validate `.travis.yml` file
  - https://github.com/travis-ci/travis-yml
  - https://docs.travis-ci.com/user/build-config-validation
- setup another CI for more thorough testing?
  - https://www.appveyor.com
  - https://about.gitlab.com/product/continuous-integration/
- update README dependencies
  - https://deno.land/std/manual.md#download-and-install
- split native build into library and executable? (library would be used by the javascript build)

** TODO run build on Travis CI for simple initial testing?

- TAP, https://testanything.org/
- Cram, https://bitheap.org/cram/
- mdx, https://github.com/realworldocaml/mdx
- benchmark/performance tests
  - https://github.com/trizen/language-benchmarks
  - https://github.com/sharkdp/hyperfine
  - https://github.com/Gabriel439/bench
- latency
  - https://pavelfatin.com/typing-with-pleasure/
  - https://thume.ca/2020/05/20/making-a-latency-tester/
  - https://danluu.com/input-lag/
  - https://danluu.com/keyboard-latency/
  - https://danluu.com/term-latency/
- binary bloat profiler
  - https://github.com/google/bloaty
- linting
  - GitHub Super Linter, https://news.ycombinator.com/item?id=23563823
- auto code formatter
  - shfmt? https://github.com/mvdan/sh
- enable optimization in release build? https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html
- where to build with ASAN? `ASAN_OPTIONS="detect_stack_use_after_return=1,print_stats=1"`
- specify default native build in readme?
- add stages for alpha (Debug with instrumentation), beta (Debug), gamma (Release with instrumentation), release (Release)?
- add support for Bochs and Qemu? easier for installation, for vm.sh, and screenshots?
  - https://pcem-emulator.co.uk/
- add minimal functional tests?
- https://embeddedbits.org/how-is-the-linux-kernel-tested/

** TODO add check for non-executable stacks

- https://unix.stackexchange.com/questions/66802/disable-stack-protection-on-ubuntu-for-buffer-overflow-without-c-compiler-flags
- also verify library if needed
- use `gold` linker? `--warn-execstack`
- https://wiki.ubuntu.com/SecurityTeam/Roadmap/ExecutableStacks
- https://mudongliang.github.io/2016/05/24/stack-protector.html
- assembler as well
  - eg. `-Wa,--noexecstack`
  - https://www.airs.com/blog/archives/518
  - https://www.win.tue.nl/~aeb/linux/hh/protection.html

** TODO use other sanitizers too? eg. LeakSanitizer, UndefinedBehaviorSanitizer

** TODO enable static code analyzers

- https://developers.redhat.com/blog/2020/03/26/static-analysis-in-gcc-10/
  - "-fanalyzer option in gcc-10", https://news.ycombinator.com/item?id=23103642
- MSVC SAL https://docs.microsoft.com/cpp/code-quality/understanding-sal
- MSVC CL https://docs.microsoft.com/cpp/build/reference/analyze-code-analysis
- https://github.com/returntocorp/semgrep
- https://clang.llvm.org/extra/clang-tidy/
- Cyclomatic complexity
- https://scan.coverity.com
- https://github.com/SonarSource/sonarqube
- https://www.owasp.org/index.php/Static_Code_Analysis
- https://github.com/google/sanitizers
- http://clang-analyzer.llvm.org
- shellcheck for shell scripts (add to dependencies as well)
- https://yetanotherchris.dev/clean-code/gestalt-principles/

** TODO build documentation

- check places for missing documentation (eg. `k_Token_parse` should say it's iterative)
- validate link rot (in documentation as well as comments?)
  - https://linkchecker.github.io/linkchecker/
  - https://www.gwern.net/Archiving-URLs#detection
- avoid too many abbreviations
- add a document on the architecture?
  - https://news.ycombinator.com/item?id=26048784
  - https://matklad.github.io//2021/02/06/ARCHITECTURE.md.html
- add code review guidelines? more general than that?
  - eg. "we'll never need more than X of Y"

** TODO access struct members directly, instead of wrappers for transparency? downsides?

** TODO make the system more resilient

- warn more instead of aborting
- handle (ignore?) errors during logging
- magnetic amplifier, https://news.ycombinator.com/item?id=23548891

** TODO allow custom memory allocators?

- https://ziglang.org/documentation/master/#Choosing-an-Allocator

** TODO reproducible builds?

- https://reproducible-builds.org
- https://signal.org/blog/reproducible-android/
- https://savannah.nongnu.org/projects/stage0

** TODO logging of long integers (eg. 64-bit Multiboot mem region addr/len)

** TODO sponsoring?

- https://www.vim.org/sponsor/

* javascript

** TODO build library too? 

** TODO move non-JS parts to native and core

** TODO always append '\0' to Str instances?

* native

** TODO colored logging

* x86-32

** TODO fix static linking

- need `-rdynamic` when linking to allow getting backtraces from within?
- why can't the final executable static link against the core library?
- https://stackoverflow.com/questions/6578484/telling-gcc-directly-to-link-a-library-statically
- https://stackoverflow.com/questions/47614835/how-to-compile-static-lib-library-for-windows-in-linux-or-macos

** TODO how to have proper documentation comments in NASM Assembly source code?

- also build documentation

** TODO remove direct references to globals/singletons

- make `Text` not directly reference the global `Gfx` memory map?
- pass Multiboot variables to `main` instead of using globals
- avoid these repeated calls to `*_get()`

** TODO upgrade to Multiboot 2? UEFI?

- Coreboot? https://puri.sm/projects/coreboot/
- keep supporting Multiboot 1?
- support EFI/UEFI?

** TODO look into adding support for x86-64

- ASFLAGS += -f elf64
- CCFLAGS += -m64
- LINKFLAGS += -m elf_x86_64

** TODO implement shutdown (it currently halts -- use it for debugging?)

** TODO timestamp logging
