* interpreter

** TODO switch from CMake to Makefiles (potentially simpler, faster)

- auto-generate dependencies?
  - https://en.wikipedia.org/wiki/Makedepend
  - https://ccache.dev/
  - https://github.com/mozilla/sccache
  - https://docs.microsoft.com/cpp/build/reference/showincludes-list-include-files
- explain the various `CFLAGS_GCC_*` variables, as well as `CFLAGS_ASAN`
- explain `Makefile.config` and compiler specific ones
- don't forget to remove CMakeLists files
- other build cleanups:
  - ensure good source code documentation right from the start (eg. core, native, etc)
  - cleaner project root? create scripts/helpers folder?
  - Avoid abbreviations unless for acronyms or well understood longer words? Eg String, Error
  - lowercase source code files?

** TODO setup initial build and minimal testing/run CD/CI on GitHub Actions

- fix failing Windows build (enable more MSVC CL warnings?) 
- setup CI builds for both 32-bit and 64-bit hosts
- add minimal functional tests? Cram CLI test framework, https://bitheap.org/cram/
- which build matrix should use ASAN? debug and release builds? `ASAN_OPTIONS="detect_stack_use_after_return=1,print_stats=1"`
- add support for Bochs and Qemu? easier for installation, for vm.sh, and screenshot? See https://pcem-emulator.co.uk
- https://embeddedbits.org/how-is-the-linux-kernel-tested/
- sign-up to interest mailing lists for dependencies? including OS, CI, etc

** TODO add more linting that's missing

- GitHub Super Linter, https://news.ycombinator.com/item?id=23563823

** TODO coding style conventions

- auto code formatter for consistency, add to dev-cycle
- shfmt? https://github.com/mvdan/sh

** TODO merge Javascript builds into native and core

** TODO always append '\0' to Str instances?

** TODO decouple interpreter modules from each other?

- via C includes, `#include <karyon/core/Log.h>`
- via C library linking, `-lkaryon`

** TODO simplify error handling and use Maybe/Optional/Result types?

** TODO CI benchmark/test performance w/regressions as failures

- https://github.com/trizen/language-benchmarks
- https://github.com/sharkdp/hyperfine
- https://github.com/Gabriel439/bench
- latency
  - https://pavelfatin.com/typing-with-pleasure/
  - https://thume.ca/2020/05/20/making-a-latency-tester/
  - https://danluu.com/input-lag/
  - https://danluu.com/keyboard-latency/
  - https://danluu.com/term-latency/

** TODO CI binary bloat profiler w/regressions as failures

- https://github.com/google/bloaty

** TODO minimal bootstrapping seed size

- Guix Further Reduces Bootstrap Seed to 25%, https://news.ycombinator.com/item?id=23526916
- https://guix.gnu.org/blog/2020/guix-further-reduces-bootstrap-seed-to-25/
- https://savannah.nongnu.org/projects/stage0
- https://bootstrappable.org

** TODO add check for non-executable stacks

- https://unix.stackexchange.com/questions/66802/disable-stack-protection-on-ubuntu-for-buffer-overflow-without-c-compiler-flags
- also verify library if needed
- use `gold` linker? `--warn-execstack`
- https://wiki.ubuntu.com/SecurityTeam/Roadmap/ExecutableStacks
- https://mudongliang.github.io/2016/05/24/stack-protector.html
- assembler as well
  - eg. `-Wa,--noexecstack`
  - https://www.airs.com/blog/archives/518
  - https://www.win.tue.nl/~aeb/linux/hh/protection.html

** TODO use other sanitizers too? eg. LeakSanitizer, UndefinedBehaviorSanitizer

- https://github.com/google/sanitizers
- https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html
- https://github.com/google/sanitizers/wiki/AddressSanitizerLeakSanitizer

** TODO enable static code analyzers

- https://developers.redhat.com/blog/2020/03/26/static-analysis-in-gcc-10/
  - "-fanalyzer option in gcc-10", https://news.ycombinator.com/item?id=23103642
- MSVC SAL https://docs.microsoft.com/cpp/code-quality/understanding-sal
- MSVC CL https://docs.microsoft.com/cpp/build/reference/analyze-code-analysis
- https://github.com/returntocorp/semgrep
- https://clang.llvm.org/extra/clang-tidy/
- Cyclomatic complexity
- https://scan.coverity.com
- https://github.com/SonarSource/sonarqube
- https://www.owasp.org/index.php/Static_Code_Analysis
- https://github.com/google/sanitizers
- http://clang-analyzer.llvm.org
- shellcheck for shell scripts (add to dependencies as well)
- https://yetanotherchris.dev/clean-code/gestalt-principles/
- https://semgrep.dev/

** TODO build documentation

- check places for missing documentation (eg. `k_Token_parse` should say it's iterative)
- validate link rot (in documentation as well as comments?)
  - https://linkchecker.github.io/linkchecker/
  - https://www.gwern.net/Archiving-URLs#detection
- avoid too many abbreviations
- add a document on the architecture?
  - https://news.ycombinator.com/item?id=26048784
  - https://matklad.github.io//2021/02/06/ARCHITECTURE.md.html
- add code review guidelines? more general than that?
  - eg. "we'll never need more than X of Y"

** TODO make the system more resilient

- warn more instead of aborting
- handle (ignore?) errors during logging
- magnetic amplifier, https://news.ycombinator.com/item?id=23548891

** TODO allow custom memory allocators?

- https://ziglang.org/documentation/master/#Choosing-an-Allocator

** TODO reproducible builds?

- https://reproducible-builds.org
- https://signal.org/blog/reproducible-android/
- https://savannah.nongnu.org/projects/stage0

** TODO logging of long integers (eg. 64-bit Multiboot mem region addr/len)

* native

** TODO colored logging

* x86-32

** TODO rename?

- to i386 (and x86-64 to amd64) like Debian?
- more correct?

** TODO fix static linking

- need `-rdynamic` when linking to allow getting backtraces from within?
- why can't the final executable static link against the core library?
- https://stackoverflow.com/questions/6578484/telling-gcc-directly-to-link-a-library-statically
- https://stackoverflow.com/questions/47614835/how-to-compile-static-lib-library-for-windows-in-linux-or-macos

** TODO how to have proper documentation comments in NASM Assembly source code?

- also build documentation

** TODO remove direct references to globals/singletons

- make `Text` not directly reference the global `Gfx` memory map?
- pass Multiboot variables to `main` instead of using globals
- avoid these repeated calls to `*_get()`

** TODO upgrade to Multiboot 2? UEFI?

- Coreboot? https://puri.sm/projects/coreboot/
- keep supporting Multiboot 1?
- support EFI/UEFI?

** TODO add support for x86-64

- ASFLAGS += -f elf64
- CCFLAGS += -m64
- LINKFLAGS += -m elf_x86_64

** TODO implement shutdown (it currently halts -- use it for debugging?)

** TODO timestamp logging
