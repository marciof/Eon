* interpreter

** TODO CMake is too complex/big, alternatives? Make?

- finish README dependencies and build instructions
- https://noahloomans.com/tutorials/makefile/
- https://nullprogram.com/blog/2017/08/20/
- https://pubs.opengroup.org/onlinepubs/9699919799/utilities/make.html
- https://skramm.blogspot.com/2013/04/writing-portable-makefiles.html
- https://david.rothlis.net/large-gnu-make/
- dev cycle watch (use inotify?), https://github.com/watchexec/watchexec

** TODO simplify error handling and use Maybe/Optional types?

** TODO split dependencies per build target (eg. native, x86-32, etc)

- finish README dependencies and build instructions
- sign-up to interest mailing lists for dependencies? including OS, CI, etc
- enable more MSVC CL warnings
- setup CI builds for other compilers on OSX/Windows?
- setup CI builds for other CPU architectures?
- setup CI builds for other OS versions?
- setup CI builds for both 32-bit and 64-bit hosts
  - https://github.com/travis-ci/travis-ci/issues/5770
- validate `.travis.yml` file
  - https://github.com/travis-ci/travis-yml
  - https://docs.travis-ci.com/user/build-config-validation
- setup another CI for more thorough testing?
  - https://www.appveyor.com
  - https://about.gitlab.com/product/continuous-integration/
- update README dependencies
  - https://deno.land/std/manual.md#download-and-install
- split native build into library and executable? (library would be used by the javascript build)

** TODO run build on Travis CI for simple initial testing?

- benchmark/performance tests, https://github.com/trizen/language-benchmarks
- enable optimization in release build? https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html
- where to build with ASAN? `ASAN_OPTIONS="detect_stack_use_after_return=1,print_stats=1"`
- specify default native build in readme?
- add stages for alpha (Debug with instrumentation), beta (Debug), gamma (Release with instrumentation), release (Release)?
- add support for Bochs and Qemu? easier for installation, for vm.sh, and screenshots?
- add minimal functional tests?
- https://embeddedbits.org/how-is-the-linux-kernel-tested/

** TODO add check for non-executable stacks

- https://unix.stackexchange.com/questions/66802/disable-stack-protection-on-ubuntu-for-buffer-overflow-without-c-compiler-flags
- also verify library if needed
- use `gold` linker? `--warn-execstack`
- https://wiki.ubuntu.com/SecurityTeam/Roadmap/ExecutableStacks
- https://mudongliang.github.io/2016/05/24/stack-protector.html
- assembler as well
  - eg. `-Wa,--noexecstack`
  - https://www.airs.com/blog/archives/518
  - https://www.win.tue.nl/~aeb/linux/hh/protection.html

** TODO use other sanitizers too? eg. LeakSanitizer, UndefinedBehaviorSanitizer

** TODO enable static code analyzers

- https://developers.redhat.com/blog/2020/03/26/static-analysis-in-gcc-10/
  - "-fanalyzer option in gcc-10", https://news.ycombinator.com/item?id=23103642
- MSVC SAL https://docs.microsoft.com/cpp/code-quality/understanding-sal
- MSVC CL https://docs.microsoft.com/cpp/build/reference/analyze-code-analysis

** TODO build documentation

- check places for missing documentation (eg. `k_Token_parse` should say it's iterative)
- validate link rot (in documentation as well as comments?)
- avoid too many abbreviations

** TODO access struct members directly, instead of wrappers for transparency?

** TODO make the system more resilient

- warn more instead of aborting
- handle (ignore?) errors during logging

** TODO allow custom memory allocators?

- https://ziglang.org/documentation/master/#Choosing-an-Allocator

** TODO reproducible builds?

- https://reproducible-builds.org/docs/
- https://signal.org/blog/reproducible-android/

** TODO logging of long integers (eg. 64-bit Multiboot mem region addr/len)

** JIT? compilation?

- QBE, https://c9x.me/compile/
- libgccjit, https://gcc.gnu.org/onlinedocs/jit/
- Compiling Scheme to C with closure conversion, <http://matt.might.net/articles/compiling-scheme-to-c/>

* javascript

** TODO move non-JS parts to native and core

** TODO always append '\0' to Str instances?

* native

** TODO colored logging

* x86-32

** TODO fix static linking

- need `-rdynamic` when linking to allow getting backtraces from within?
- why can't the final executable static link against the core library?
- https://stackoverflow.com/questions/6578484/telling-gcc-directly-to-link-a-library-statically
- https://stackoverflow.com/questions/47614835/how-to-compile-static-lib-library-for-windows-in-linux-or-macos

** TODO how to have proper documentation comments in NASM Assembly source code?

- also build documentation

** TODO remove direct references to globals/singletons

- make `Text` not directly reference the global `Gfx` memory map?
- pass Multiboot variables to `main` instead of using globals
- avoid these repeated calls to `*_get()`

** TODO upgrade to Multiboot 2?

- keep supporting Multiboot 1?
- support EFI/UEFI?

** TODO look into adding support for x86-64

- ASFLAGS += -f elf64
- CCFLAGS += -m64
- LINKFLAGS += -m elf_x86_64

** TODO implement shutdown (it currently halts -- use it for debugging?)

** TODO timestamp logging
