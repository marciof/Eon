* interpreter

** TODO use other sanitizers too? eg. LeakSanitizer, UndefinedBehaviorSanitizer

** TODO run build on Travis CI for simple initial testing?

- attempt to use plain Makefile? https://nullprogram.com/blog/2017/08/20/
- enable optimization in release build: https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html
- where to build with ASAN? `ASAN_OPTIONS="detect_stack_use_after_return=1,print_stats=1"`
- specify default native build in readme?
- add stages for alpha (Debug with instrumentation), beta (Debug), gamma (Release with instrumentation), release (Release)?

** TODO split Travis/CI dependencies per build target (eg. native, x86-32, etc)

- setup CI builds for Linux, Windows, Mac
  - https://config.travis-ci.com/ref/dist
  - https://docs.travis-ci.com/user/reference/overview/#virtualization-environments
  - https://docs.travis-ci.com/user/languages/c/
  - https://docs.travis-ci.com/user/multi-os/
  - https://www.appveyor.com/
  - https://about.gitlab.com/product/continuous-integration/
  - https://bitbucket.org/product/features/pipelines
- setup CI builds for both 32-bit and 64-bit hosts
  - https://github.com/travis-ci/travis-ci/issues/5770
- add support for Bochs and Qemu? easier for installation, for vm.sh, and screenshots?
- validate `.travis.yml` file
  - https://github.com/travis-ci/travis-yml
  - https://docs.travis-ci.com/user/build-config-validation
- sign-up to interest mailing lists for dependencies?
- add minimal functional tests?

** TODO build documentation

- check places for missing documentation (eg. `k_Token_parse` should say it's iterative)

** TODO access struct members directly, instead of wrappers for transparency?

** TODO make the system more resilient

- warn more instead of aborting
- handle (ignore?) errors during logging

** TODO reproducible builds?

- https://reproducible-builds.org/docs/
- https://signal.org/blog/reproducible-android/

** TODO logging of long integers (eg. 64-bit Multiboot mem region addr/len)

** TODO "Why isn’t someone using my software product or open source tool? It’s good!"

- https://news.ycombinator.com/item?id=17642147
- https://threadreaderapp.com/thread/921921604140937216.html

** TODO financing

- https://www.patreon.com/zloirock
- https://opencollective.com/core-js
- https://flattr.com
- https://www.buymeacoffee.com/mweststrate
- https://itsfoss.com/open-source-funding-platforms/

* javascript

** TODO move non-JS parts to native and core

** TODO always append '\0' to Str instances?

* native

** TODO colored logging

* x86-32

** TODO how to have proper documentation comments in NASM Assembly source code?

- also build documentation

** TODO remove direct references to globals/singletons

- make `Text` not directly reference the global `Gfx` memory map?
- pass Multiboot variables to `main` instead of using globals
- avoid these repeated calls to `*_get()`

** TODO upgrade to Multiboot 2?

- keep supporting Multiboot 1?
- support EFI/UEFI?

** TODO look into adding support for x86-64

- ASFLAGS += -f elf64
- CCFLAGS += -m64
- LINKFLAGS += -m elf_x86_64

** TODO fix static linking

- need `-rdynamic` when linking to allow getting backtraces from within?
- why can't the final executable static link against the core library?

** TODO implement shutdown (it currently halts -- use it for debugging?)

** TODO timestamp logging
