* TODO shell/REPL, release EARLY, release OFTEN

- priority is to make a shell/REPL so that I can start using it ASAP, for early use and testing.
- code reuse is also very important, don't reinvent the wheel, https://sourceware.org/libffi/
- Unix tools philosophy for the interpreter? Command line options for each stage for textual output (easier to debug and integrate with other external tools without code linking?): stream tokens from input one per line, then parser, etc.
  - Just echo back each line from stdin in a robust way.
  - Integrate with lib readline.
  - Syntax highlighting. (Language Server Protocol? https://langserver.org/)
  - Translate AST to a backend that writes JavaScript (browser and node?) and/or Lisp for a quicker first release? Can use an embedded interpreter to run it on spot (pico Lisp).
  - Duktape, embeddable JavaScript: https://duktape.org/
  - QuickJS, embeddable JavaScript: https://bellard.org/quickjs/

* TODO switch from CMake to Makefiles (potentially simpler, faster)

- sign-up to interest mailing lists for dependencies? including OS, CI, etc, regularly test new versions, don't want to be blindsided and unprepared for things like Travis CI dropping free for OSS
- https://github.com/keepassxreboot/keepassxc/wiki/Building-KeePassXC
- auto-generated C file dependencies?
  - https://en.wikipedia.org/wiki/Makedepend
  - https://ccache.dev/
  - https://github.com/mozilla/sccache
  - https://docs.microsoft.com/cpp/build/reference/showincludes-list-include-files
- explain the various `CFLAGS_GCC_*` variables, as well as `CFLAGS_ASAN`
- explain `Makefile.config` and compiler specific ones
- don't forget to remove CMakeLists files
- x86-32 dependencies:
  - valgrind
  - for vm.sh:
    - grub-common # contains grub-mkrescue to build a bootable ISO
    - grub-pc-bin # PC/BIOS architecture version of GRUB (eg. non-UEFI)
    - mtools # symlinked from mformat, needed by grub-mkrescue
    - xorriso # create ISO files, needed by grub-mkrescue
    - VirtualBox
- other build cleanups:
  - ensure good source code documentation right from the start (eg. core, native, etc)
  - cleaner project root? create scripts/helpers folder?
  - Avoid abbreviations unless for acronyms or well understood longer words? Eg String, Error
  - lowercase source code files?
  - Rename root folders? language/spec, stdlib, compiler (or interpreter? shell? this word works well in both the terminal or command line sense, as well as the shell for building a GUI/UI, and doesn't dictate whether it's compiled or interpreted)

* TODO setup initial build and minimal testing/run CD/CI on GitHub Actions

- remove Travis CI config file 
- fix failing Windows build (enable more MSVC CL warnings?) 
- setup CI builds for both 32-bit and 64-bit hosts
- add minimal functional tests? Cram CLI test framework, https://bitheap.org/cram/
- which build matrix should use ASAN? debug and release builds? `ASAN_OPTIONS="detect_stack_use_after_return=1,print_stats=1"`
- add support for Bochs and Qemu? easier for installation, for vm.sh, and screenshot? See https://pcem-emulator.co.uk
- https://embeddedbits.org/how-is-the-linux-kernel-tested/

* TODO add more linting that's missing

- GitHub Super Linter, https://news.ycombinator.com/item?id=23563823

* TODO coding style conventions

- auto code formatter for consistency, add to dev-cycle
- validate/enforce coding style is being followed
- shfmt? https://github.com/mvdan/sh
- for Python? https://black.readthedocs.io/

* TODO merge Javascript builds into native and core

* TODO always append '\0' to Str instances?

* TODO decouple interpreter modules from each other?

- via C includes, `#include <karyon/core/Log.h>`
- via C library linking, `-lkaryon`

* TODO simplify error handling and use Maybe/Optional/Result types?

Otherwise:

- Check uses of K_LOG_LEVEL_ERROR and whether it should be made an Err for proper logging elsewhere.
- Make Err be the last param always for consistency.
- Check places where it assumed K_LOG_LEVEL_ERROR was stopping the system.
- Verify all uses of Err (where it's missing, where it's not needed, etc).
- Show line context in error messages?
- Consider libunwind? http://www.nongnu.org/libunwind/

* TODO CI benchmark/test performance w/regressions as failures

- how to measure and track memory usage as well, to avoid bloat? 
- https://github.com/ggreer/the_silver_searcher#how-is-it-so-fast
- https://github.com/trizen/language-benchmarks
- https://github.com/sharkdp/hyperfine
- https://github.com/Gabriel439/bench
- profiler:
  - Evaluation of CPU profiling tools: gperftools, Valgrind and gprof
    - https://gernotklingler.com/blog/gprof-valgrind-gperftools-evaluation-tools-application-level-cpu-profiling-linux/
    - https://news.ycombinator.com/item?id=21480984
  - flamegraphs, http://www.brendangregg.com/flamegraphs.html
- latency
  - https://pavelfatin.com/typing-with-pleasure/
  - https://thume.ca/2020/05/20/making-a-latency-tester/
  - https://danluu.com/input-lag/
  - https://danluu.com/keyboard-latency/
  - https://danluu.com/term-latency/

* TODO CI binary bloat profiler w/regressions as failures

- https://github.com/google/bloaty

* TODO minimal bootstrapping seed size

- Guix Further Reduces Bootstrap Seed to 25%, https://news.ycombinator.com/item?id=23526916
- https://guix.gnu.org/blog/2020/guix-further-reduces-bootstrap-seed-to-25/
- https://savannah.nongnu.org/projects/stage0
- https://bootstrappable.org
- How to audit dependencies?

* TODO add check for non-executable stacks

- https://unix.stackexchange.com/questions/66802/disable-stack-protection-on-ubuntu-for-buffer-overflow-without-c-compiler-flags
- also verify library if needed
- use `gold` linker? `--warn-execstack`
- https://wiki.ubuntu.com/SecurityTeam/Roadmap/ExecutableStacks
- https://mudongliang.github.io/2016/05/24/stack-protector.html
- assembler as well
  - eg. `-Wa,--noexecstack`
  - https://www.airs.com/blog/archives/518
  - https://www.win.tue.nl/~aeb/linux/hh/protection.html

* TODO use other analyzers/sanitizers too? eg. LeakSanitizer, UndefinedBehaviorSanitizer

- https://github.com/google/sanitizers
- https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html
- memory leaks?
  - https://github.com/google/sanitizers/wiki/AddressSanitizerLeakSanitizer
  - Valgrind? Will it conflict or overlap in functionality with other ones? 

* TODO test memory allocations

- handle out of memory, https://github.com/andrewrk/malcheck

* TODO fuzzer/fuzzy testing

- http://lcamtuf.coredump.cx/afl/
- https://gitlab.com/akihe/radamsa

* TODO enable (more?) static code analyzers

- https://developers.redhat.com/blog/2020/03/26/static-analysis-in-gcc-10/
  - "-fanalyzer option in gcc-10", https://news.ycombinator.com/item?id=23103642
- MSVC SAL https://docs.microsoft.com/cpp/code-quality/understanding-sal
- MSVC CL https://docs.microsoft.com/cpp/build/reference/analyze-code-analysis
- https://github.com/returntocorp/semgrep
- https://clang.llvm.org/extra/clang-tidy/
- Cyclomatic complexity
- https://scan.coverity.com
- https://github.com/SonarSource/sonarqube
- https://www.owasp.org/index.php/Static_Code_Analysis
- https://github.com/google/sanitizers
- http://clang-analyzer.llvm.org
- shellcheck for shell scripts (add to dependencies as well)
- https://yetanotherchris.dev/clean-code/gestalt-principles/
- https://semgrep.dev/

* TODO build documentation

- analyze and document big O time and space complexity
- Doxygen? Too big? 
- check places for missing documentation (eg. `k_Token_parse` should say it's iterative)
- validate link rot (in documentation as well as comments?)
  - https://linkchecker.github.io/linkchecker/
  - https://www.gwern.net/Archiving-URLs#detection
- avoid too many abbreviations
- add a document on the architecture?
  - https://news.ycombinator.com/item?id=26048784
  - https://matklad.github.io//2021/02/06/ARCHITECTURE.md.html
- add code review guidelines? more general than that?
  - eg. "we'll never need more than X of Y"

* TODO make the system more resilient

- warn more instead of aborting
- handle (ignore?) errors during logging
- magnetic amplifier, https://news.ycombinator.com/item?id=23548891

* TODO allow custom memory allocators?

- to not dictate how it's to be used
- https://ziglang.org/documentation/master/#Choosing-an-Allocator

* TODO reproducible builds?

- https://reproducible-builds.org
- https://signal.org/blog/reproducible-android/
- https://savannah.nongnu.org/projects/stage0

* TODO logging of long integers? (eg. 64-bit Multiboot mem region addr/len)

* TODO arbitrary precision arithmetic

- https://bellard.org/libbf/
- https://gmplib.org/

* TODO SSL/TLS protocol

- https://bearssl.org/
