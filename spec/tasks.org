* TODO license to prevent abuse from cloud services SaaS

- clear terminology: FLOSS (free, libre, and open source software)
- GLP/AGPL with Commons Clause?
- https://commonsclause.com/
- https://www.gnu.org/licenses/gpl-faq.html.en
- AGPL non commercial use, https://news.ycombinator.com/item?id=21195626
- licensing SaaS, https://news.ycombinator.com/item?id=19362326
- https://www.infoworld.com/article/3366297/open-source-licenses-may-not-matter-so-much-any-more.html
- https://www.theregister.co.uk/2018/10/16/mongodb_licensning_change/
- https://news.ycombinator.com/item?id=19433394
- https://www.freecodecamp.org/news/facebook-just-changed-the-license-on-react-heres-a-2-minute-explanation-why-5878478913b2/
- https://opensource.stackexchange.com/questions/4875/open-source-license-to-prevent-commercial-use

* TODO check licensing of all libraries, tools, dependencies

* TODO improve documentation

- Make `count` throw an error for built-ins or foreign values?
- Function sub headings
- Examples and conditions per section
- See where the language can be simplified

* TODO multiline nesting comments (without needing an IDE)?

* TODO optional static typing?

- Algebraic data types? Check ML languages.

* TODO syntax for complex numbers?

* TODO syntax for fractions?

* TODO build target to lint/validate CommonMark documents

- https://github.com/commonmark/cmark
- https://talk.commonmark.org/t/is-there-a-commonmark-tidy-answer-kinda/2464/3
- https://github.com/DavidAnson/markdownlint
- https://github.com/markdownlint/markdownlint
- https://github.com/igorshubovych/markdownlint-cli
- https://github.com/remarkjs/remark-lint
- https://github.com/notslang/tidy-markdown

* TODO visual grammar diagram?

- Railroad Diagram Generator
- http://lua4z.com/doc/manual/syntax.md.html

* TODO indentation based syntax grammar

- https://docs.python.org/3/reference/grammar.html
- https://devguide.python.org/compiler/

* TODO investigate shell pipeline support

- "Pipelines Support Vectorized, Point-Free, and Imperative Style", https://www.oilshell.org/blog/2017/01/15.html
- "For the Love of Pipes", https://blog.jessfraz.com/post/for-the-love-of-pipes/

* TODO FEXPRs: "Special Forms in Lisp", https://www.nhplace.com/kent/Papers/Special-Forms.html

* TODO http://www.infoq.com/presentations/Value-Identity-State-Rich-Hickey

* TODO "Empirical Analysis of Programming Language Adoption", Leo A. Meyerovich, Ariel Rabkin: http://sns.cs.princeton.edu/docs/asr-oopsla13.pdf

* TODO "Dealing with Properties", Martin Fowler, https://www.martinfowler.com/apsupp/properties.pdf

* TODO evaluate typing difficulty of each identifier and syntax quantitatively.

- Can the syntax grammar be simplified without hurting readability and flexibility?
- Use easier synonyms for hard to type words?
- Bulk analyze source code out there.
- Frequency of syntax tokens, familiarity, ease of typing, speaking, identifiers.
- https://en.wikipedia.org/wiki/Comparison_of_programming_languages_(syntax)
- http://hyperpolyglot.org/scripting
- https://github.com/anvaka/common-words/blob/master/README.md

* TODO learn best/worst features of other languages/systems (check first the ones listed as inspiration)

- Elm
- PowerShell
- OCaml
- C
- Common Lisp
- JavaScript
- Perl
- Python
- Scheme
- Smalltalk
- Mesh Spreadsheet
- Java
- Clojure
- Self
- Kotlin
- Wren
- F#
- Matlab
- Rust
- Ruby
- Go
- Julia
- Haskell
- Erlang
- Elixir
- Typed Racket
- PureScript
- Io
- ML
- Lua
- Haxe
- Tcl
- Shen
- REBOL
- Mathematica
- HyperCard
- Awk
- Parabola.io
- GNU Octave
- Maxima Algebra System
- Pascal
- R
- HyperTalk/HyperCard
- AppleScript
- bsed, https://github.com/andrewbihl/bsed
