# Travis CI build config
# https://config.travis-ci.com

language: c

notifications:
  email:
    on_success: always

env:
  global: VERBOSE=ON

addons:

  # Linux
  apt:
    packages:
      - python3
      - python3-pip

      # Target: all
      - cmake
      - make

      # Target: x86-32
      - nasm # Assembler
      - multiboot # Multiboot header files and `grub-file` to verify compliance

      # Target: x86-32, Script: iso.sh
      - grub-common
      - xorriso

      # Target: x86-32, Script: vm.sh
      # https://www.virtualbox.org/wiki/Linux_Downloads

      # Target: x86-32, Host: Linux 64-bit
      - gcc-multilib # cross-compile 32-bit applications on 64-bit systems

  # macOS
  homebrew:
    packages:
      - python@3

jobs:
  include:

    - os: linux
      compiler: gcc
      script:
        - cmake -Wdev --warn-uninitialized -DBUILD_NATIVE=ON -DBUILD_JAVASCRIPT=ON -DBUILD_X86_32=ON "$TRAVIS_BUILD_DIR"
        - cmake --build .

    - os: linux
      compiler: clang
      script:
        - cmake -Wdev --warn-uninitialized -DBUILD_NATIVE=ON -DBUILD_JAVASCRIPT=ON -DBUILD_X86_32=ON "$TRAVIS_BUILD_DIR"
        - cmake --build .

    - os: osx
      script:
        - cmake -Wdev --warn-uninitialized -DBUILD_NATIVE=ON -DBUILD_JAVASCRIPT=ON -DBUILD_X86_32=ON "$TRAVIS_BUILD_DIR"
        - cmake --build .

    - os: windows
      script:
        - cmake -Wdev --warn-uninitialized -DBUILD_NATIVE=ON -DBUILD_JAVASCRIPT=ON -DBUILD_X86_32=ON "$TRAVIS_BUILD_DIR"
        - cmake --build .

    - name: Linux (GCC)
      os: linux
      dist: bionic
      compiler: gcc
      before_script: python3 -m pip install -r requirements.txt
      script:
        - make all
        - cd "$TRAVIS_BUILD_DIR/interpreter/core"
        - make all

    - name: macOS (Clang)
      os: osx
      compiler: clang
      before_script: python3 -m pip install -r requirements.txt
      script:
        - make all
        - cd "$TRAVIS_BUILD_DIR/interpreter/core"
        - make all

    - name: Windows (CL)
      os: windows
      compiler: cl
      install:
        # TODO use WinGet to install dependencies?
        - |-
          powershell -ExecutionPolicy Bypass -Command '
            Set-StrictMode -Version Latest
            $ErrorActionPreference = "Stop"

            choco install vswhere
            choco install python3

            # For `Invoke-Batch-File` to source batch files into PowerShell.
            Import-Module PowerShellGet
            Install-Module -AllowClobber -Force Pscx

            Invoke-BatchFile (Get-Command RefreshEnv).Source
            python -m pip install -r requirements.txt
          ' 2>&1
      script:
        - |-
          powershell -ExecutionPolicy Bypass -Command '
            Set-StrictMode -Version Latest

            Invoke-BatchFile (Get-Command RefreshEnv).Source
            Invoke-BatchFile (vswhere -latest -products "*" -find "**\vcvarsall.*") amd64

            nmake PYTHON=python all
            $hadError = -not $?

            cd "$env:TRAVIS_BUILD_DIR\interpreter\core"
            nmake all
            $hadError = $hadError -or -not $?

            Exit $hadError
          ' 2>&1
